################################################################################
#This file is part of Dedomenon.
#
#Dedomenon is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Dedomenon is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Dedomenon.  If not, see <http://www.gnu.org/licenses/>.
#
#Copyright 2008 RaphaÃ«l Bauduin
################################################################################

# 
# To change this template, choose Tools | Templates
# and open the template in the editor.
 

require 'json'
module Rest::UrlGenerator

  @@base_url = 'http://localhost:3000'
  
  # This lookup contains the relative locations of the resources
  # It should be noted that these are only for GET /:id i.e. getting 
  # a single resource. They might or might not work on other REST methods.
  # 
  # Adding new entiies:
  #  On the left side, mention the class name.
  #  On right side, mention the resource location.
  # 
  # 
  @@lookup = 
    {
      :Account                => '%s/accounts/%s',
      :AccountType            => '%s/account_types/%s',
      :Database               => '%s/databases/%s',
      :Entity                 => '%s/entities/%s',
      :Instance               => '%s/instances/%s',
      :Relation               => '%s/relations/%s',
      :RelationSideType       => '%s/relation_side_types/%s',
      :Link                   => '%s/links/%s',
      :Detail                 => '%s/details/%s',
      :DetailStatus           => '%s/detail_statuses/%s',
      :DetailValueProposition => '%s/propositions/%s',
      :DataType               => '%s/data_types/%s',
      :User                   => '%s/users/%s',
      :UserType               => '%s/user_types/%s',
      
      
      
      # Here are the detail value types and their urls
      :DetailValue            => '%s/instances/%s/details/%s/values/%s',
      :SimpleDetailValue      => '%s/instances/%s/details/%s/values/%s',
      :LongTextDetailValue    => '%s/instances/%s/details/%s/values/%s',
      :DateDetailValue        => '%s/instances/%s/details/%s/values/%s',
      :IntegerDetailValue     => '%s/instances/%s/details/%s/values/%s',
      :DdlDetailValue         => '%s/instances/%s/details/%s/values/%s',
      :EmailDetailValue       => '%s/instances/%s/details/%s/values/%s',
      :WebUrlDetailValue      => '%s/instances/%s/details/%s/values/%s',
      :S3Attachment           => '%s/instances/%s/details/%s/values/%s',
    }


  # *Description*
  #   Replaces the given field with its REST URL.
  # NOTE: This method will not work in isolation! This module should be
  # Added to the ActiveRecordBase!
  # *Arguments*
  #   +field+ to be replaced
  #   +type+ of the field. Must be symbol listed within @@lookup hash.
  #   +options+ optiosn that were recieve from to_json method
  #   

def replace_with_url(json, field, type, options)
  
  url_key = ''
  if field == 'id'
    url_key = 'url'
  else
    url_key = field.chomp('_id') + '_url'
  end
  
  format = ''
  format = '.' + options[:format] if options[:format]
  
  if json[field] != nil
    case(type)
    when  :DetailValue,
          :SimpleDetailValue,
          :LongTextDetailValue,
          :DateDetailValue,
          :IntegerDetailValue,
          :DdlDetailValue,
          :EmailDetailValue,
          :WebUrlDetailValue,
          :S3Attachment
        json[url_key] = @@lookup[type] % [@@base_url, self.instance_id, self.detail_id, self.id] + format
    else
        json[url_key] = @@lookup[type] % [@@base_url, self.send(field)] + format
        
    end
    
  else
    json[url_key] = nil
  end
  json.delete field
  
end
#  # *Description*
#  #   This function replaces all the id and _id with url and _url
#  #   based on the data type of the incoming model
#  #   
#  # *Arguments*
#  #   +model+ The model for which json is being provided
#  #   +json+ The json of the model generated by the default active record method
#  #   +options+ currently :format => 'json'/'xml' etc.
#  #   
#  #   
#  # *Returns*
#  #   returns the JSON wtih urls substituded.
#  #
#  def substitute_urls(model, json, options ={})
#    j = replace_id(model, json, options)
#    j = replace_others(model, j, options)
#    add_model_specific_urls(model, j, options)
#  end
#  
#  # *Description*
#  #   Replaces the id of the json with the url based on its type
#  def replace_id(model, json, options={})
##    puts @@lookup[model.class.name.to_sym]
##    puts model.class
##    puts is_value_type?(model)
#    if is_value_type?(model)
#      
#      url = '"' + @@lookup[model.class.name.to_sym] % [@@base_url, model.detail_id.to_i, model.id.to_i, options[:format]] +'"'
#    else
#      url = '"' + @@lookup[model.class.name.to_sym] % [@@base_url, model.id.to_i, options[:format]] +'"'
#    end
#    
#    return json.gsub(/"id":\s+\d+/, '"url": ' + url)
#  end
#  
#  def replace_others(model, json, options={})
#    # Make a duplicate of it
#    new_json = json.dup
#    
#    # For each of the name_id
#    json.scan(/\w+_id/) do |match|
#      # Convert it to its data type name by:
#      # a- Removing _id
#      # b- Converting it to CamelCase
#      # c- Converting it to symbol
#      modelname = match.chomp('_id').camelcase.to_sym
#      
#      # Get the url template string for it
#      url = @@lookup[modelname]
#      # Move to next iteration if its nil
#      next if !url
#      
#      if is_value_type?(class_from_name(modelname.to_s).new)
#        url = url % [@@base_url, model.detail_id.to_i, model.send(match).to_i, options[:format]]
#      else
#        url = url % [@@base_url, model.send(match).to_i, options[:format]]
#      end
#      
#       
#      new_json.gsub!(/"#{match}":\s+\d+/, '"' + match.chomp('_id') + '_url'+ '": ' + '"'+url+'"')
#    end
#    return new_json
#  end
#  
#  
#  # *Description*
#  #   This adds model specific urls like for database model, the urls for its
#  #   details and entities are added.
#  #
#  def add_model_specific_urls(model, json, options={})
#    data = JSON.parse(json)
##    
##    # If its a link model, then we need to replace the 
##    # child_id and parent_id which are instance ids.
#    if model.class.name == "Link"
#      url = '"' + @@lookup + 
#      json.gsub!(/"child_id":\s+\d+/)
#    end
##    
##    return data.to_json.gsub(/\\/, '')
#    return json
#  end
#  
#  # *Description*
#  #   This checks whether the given object is a value type i.e DetailValue
#  #   and its family?
#  #
#  def is_value_type?(obj)
#    return true if %w{DetailValue}.include? obj.class.name
#    return true if obj.kind_of? DetailValue
#    return true if %w{DateDetailValue IntegerDetailValue}.include? obj.class.name
#    return false
#  end
#  
  
  
end

