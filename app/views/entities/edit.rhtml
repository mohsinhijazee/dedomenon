<% detail_ids = [] %>
<h1><%= t("madb_entity_edition", { :vars => { 'entity_name' => t(@instance.entity.name )}}) %></h1>

<%=help_info("madb_help_info_entities_edition")%>

<!-- 
<form action="/entities/apply_edit" method="post">


		<%= form_remote_tag  :url => { :controller => "entities", :action => "apply_edit" }, :complete => "
		if (request.getResponseHeader('Content-Type').match('text/plain')!=null) 
		{ 
		request.responseText.split(' ').each( function(value,index) {
			Element.removeClassName( value,'valid_form_value');
			Element.removeClassName( value,'unchecked_form_value');
			Element.addClassName( value,'invalid_form_value');
					});
			return; 
		}
		document.location='#{session['return-to']}';

		 " %>


	-->

   <form id="edition_form" method="post" onsubmit="return dojoformfunction(this);" <%= %{enctype="multipart/form-data"} if @entity.has_file_attachment_detail? %>>



<input type="hidden" name="instance_id" value="<%=@instance.id%>">
<input type="hidden" name="entity" value="<%=@instance.entity.id%>">

<%= render :partial => "entity_form", :object => @instance %>

<%= submit_tag t("madb_submit")%> 
<% if request.env["HTTP_REFERER"] %>
  <%=link_to t("madb_cancel"),request.env["HTTP_REFERER"] %>
<% end %>
</form>


<script type="text/javascript">
function dojoformfunction(f)
{
  Effect.Appear('xhr_message',{duration:0.5,queue:'end'});
  dojo.io.bind({
      url:"/app/entities/apply_edit",
      headers: {'X-Requested-With': 'XMLHttpRequest'}, 
      encoding:'utf-8',
      load: function(t, txt, e) {

// needed due to problem with IframeIO: http://trac.dojotoolkit.org/ticket/674
if (txt!=null)
  data=txt
else
{
  data = dojo.io.iframeContentWindow(dojo.io.IframeTransport.iframe).document.body.innerHTML;
  if (data.match(/<pre>(.*)<\/pre>/i)) {
      // Internet Explorer [Jon Aquino 2006-05-06]
      data = RegExp.$1;
  }
}
if (data.match(/(.{8}_([\w\s]+_[\w\s]*)\[\d\](_\w+)*(######)?)+/))
{
  ids = data.split('######');
  <%# comment needed for test code
  %>
  for(var i=0;i</*>*/ids.length; i++)
  {
      value = ids[i];
			YAHOO.util.Dom.removeClass( value,'valid_form_value');
			YAHOO.util.Dom.removeClass( value,'unchecked_form_value');
			YAHOO.util.Dom.addClass( value,'invalid_form_value');

  }
}
else if (data.match(/__ERROR__.*/))
{
  message = data.replace('__ERROR__','');
  alert(message);
}
else
{
    document.location='<%=session['return-to']%>';
}
Effect.Fade('xhr_message',{duration:0.5,queue:'end'});
                },
      error: function(t, e) {
                  alert("Error!... " + e.message);
                },
      formNode:f,
      method:"post"
  })

return false;
}

  new Form.focusFirstElement(document.forms[0]);
  </script>
